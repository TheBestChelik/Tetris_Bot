//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TetrisBot.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Point BoardPos {
            get {
                return ((global::System.Drawing.Point)(this["BoardPos"]));
            }
            set {
                this["BoardPos"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Size BoardSize {
            get {
                return ((global::System.Drawing.Size)(this["BoardSize"]));
            }
            set {
                this["BoardSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Point NextFigurePos {
            get {
                return ((global::System.Drawing.Point)(this["NextFigurePos"]));
            }
            set {
                this["NextFigurePos"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Size NextFigureSize {
            get {
                return ((global::System.Drawing.Size)(this["NextFigureSize"]));
            }
            set {
                this["NextFigureSize"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Your calibrated data is: {0}Board:{0}Position: {1}{0}Size: {2}{0}Next figure fiel" +
            "d{0}Position: {3}{0}size: {4}")]
        public string CalibrationInfo {
            get {
                return ((string)(this["CalibrationInfo"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You have to calibrate the programm before playing tetris. To do this, upload imag" +
            "es of your board and next figure field and press Run Calibration button")]
        public string MustCalibrate {
            get {
                return ((string)(this["MustCalibrate"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Please wait, calibration may take some time")]
        public string CalibrationWaitMessage {
            get {
                return ((string)(this["CalibrationWaitMessage"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Error, Board not found!")]
        public string CalibrationBoardError {
            get {
                return ((string)(this["CalibrationBoardError"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Error, Next figure field not found!")]
        public string CalibrationNextFigureError {
            get {
                return ((string)(this["CalibrationNextFigureError"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int PauseBtwPressingKeys {
            get {
                return ((int)(this["PauseBtwPressingKeys"]));
            }
            set {
                this["PauseBtwPressingKeys"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Pause between pressing keys: {0} ms")]
        public string PauseBtwPresText {
            get {
                return ((string)(this["PauseBtwPresText"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Next figure was not recognised!")]
        public string ErrorNext {
            get {
                return ((string)(this["ErrorNext"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("The scanned field: {0}{1}{0}New figure: {2}{0}Next Figure: {3}{0}Decided to move " +
            "{4} and rotate {5}")]
        public string ConsoleString {
            get {
                return ((string)(this["ConsoleString"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You have to calibrate the programm before playing tetris. To do this switch to Ca" +
            "libration tab , upload images of your board and next figure field and press Run " +
            "Calibration button")]
        public string LogTextMustCalibrate {
            get {
                return ((string)(this["LogTextMustCalibrate"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("The TetrisBot is calibrated, press play to start the bot!")]
        public string LogTextCalibrationDone {
            get {
                return ((string)(this["LogTextCalibrationDone"]));
            }
        }
    }
}
